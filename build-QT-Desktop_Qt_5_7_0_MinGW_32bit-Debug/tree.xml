<?xml version="1.0" encoding="utf-8"?>
<program>
<block>
<declare_closure>
<per_declaration>
<declare>
<type>
int
</type>
<variable>
<identifier>
ID
</identifier>
<index>
</index>
</variable>
<initialization>
</initialization>
</declare>
<per_declare_closure>
COMMA
<variable>
<identifier>
ID
</identifier>
<index>
LEFT_INDEX
<factor_type>
<number>
INT_VALUE
</number>
</factor_type>
RIGHT_INDEX
</index>
</variable>
<initialization>
</initialization>
<per_declare_closure>
</per_declare_closure>
</per_declare_closure>
SEMI
</per_declaration>
<declare_closure>
<per_declaration>
<declare>
<type>
real
</type>
<variable>
<identifier>
ID
</identifier>
<index>
LEFT_INDEX
<factor_type>
<number>
INT_VALUE
</number>
</factor_type>
RIGHT_INDEX
</index>
</variable>
<initialization>
</initialization>
</declare>
<per_declare_closure>
</per_declare_closure>
SEMI
</per_declaration>
<declare_closure>
</declare_closure>
</declare_closure>
</declare_closure>
<block_closure>
<functions>
<function>
<read_fun>
read
<variable>
<identifier>
ID
</identifier>
<index>
</index>
</variable>
</read_fun>
</function>
SEMI
</functions>
<block>
<declare_closure>
</declare_closure>
<block_closure>
<if_stmt>
if
<if_block>
<logic_exp>
<expression>
<factor>
<factor_type>
<variable>
<identifier>
ID
</identifier>
<index>
</index>
</variable>
</factor_type>
<factor_recursion>
</factor_recursion>
</factor>
<term>
</term>
</expression>
<logic_op>
LES_EQL
</logic_op>
<expression>
<factor>
<factor_type>
<number>
INT_VALUE
</number>
</factor_type>
<factor_recursion>
</factor_recursion>
</factor>
<term>
</term>
</expression>
</logic_exp>
<cpd_block>
LEFT_BOUNDER
<block>
<declare_closure>
</declare_closure>
<block_closure>
<for_loop>
for
<for_block>
<declare_or_assign>
<per_declaration>
<declare>
<type>
int
</type>
<variable>
<identifier>
ID
</identifier>
<index>
</index>
</variable>
<initialization>
ASSIGN
<right_value>
<expression>
<factor>
<factor_type>
<number>
INT_VALUE
</number>
</factor_type>
<factor_recursion>
</factor_recursion>
</factor>
<term>
</term>
</expression>
</right_value>
</initialization>
</declare>
<per_declare_closure>
</per_declare_closure>
SEMI
</per_declaration>
</declare_or_assign>
<logic_exp>
<expression>
<factor>
<factor_type>
<variable>
<identifier>
ID
</identifier>
<index>
</index>
</variable>
</factor_type>
<factor_recursion>
</factor_recursion>
</factor>
<term>
</term>
</expression>
<logic_op>
LES
</logic_op>
<expression>
<factor>
<factor_type>
<variable>
<identifier>
ID
</identifier>
<index>
</index>
</variable>
</factor_type>
<factor_recursion>
</factor_recursion>
</factor>
<term>
</term>
</expression>
</logic_exp>
SEMI
<inner_assign>
<variable>
<identifier>
ID
</identifier>
<index>
</index>
</variable>
<assign>
ASSIGN
<right_value>
<expression>
<factor>
<factor_type>
<variable>
<identifier>
ID
</identifier>
<index>
</index>
</variable>
</factor_type>
<factor_recursion>
</factor_recursion>
</factor>
<term>
PLUS
<factor>
<factor_type>
<number>
INT_VALUE
</number>
</factor_type>
<factor_recursion>
</factor_recursion>
</factor>
<term>
</term>
</term>
</expression>
</right_value>
</assign>
</inner_assign>
<cpd_block>
LEFT_BOUNDER
<block>
<declare_closure>
</declare_closure>
<block_closure>
<assignment>
<variable>
<identifier>
ID
</identifier>
<index>
LEFT_INDEX
<factor_type>
<variable>
<identifier>
ID
</identifier>
<index>
</index>
</variable>
</factor_type>
RIGHT_INDEX
</index>
</variable>
<assign>
ASSIGN
<right_value>
<expression>
<factor>
<factor_type>
<variable>
<identifier>
ID
</identifier>
<index>
</index>
</variable>
</factor_type>
<factor_recursion>
</factor_recursion>
</factor>
<term>
</term>
</expression>
</right_value>
</assign>
SEMI
</assignment>
<block>
<declare_closure>
</declare_closure>
<block_closure>
<assignment>
<variable>
<identifier>
ID
</identifier>
<index>
LEFT_INDEX
<factor_type>
<variable>
<identifier>
ID
</identifier>
<index>
</index>
</variable>
</factor_type>
RIGHT_INDEX
</index>
</variable>
<assign>
ASSIGN
<right_value>
<expression>
<factor>
<factor_type>
<variable>
<identifier>
ID
</identifier>
<index>
</index>
</variable>
</factor_type>
<factor_recursion>
DIV
<factor_type>
<number>
INT_VALUE
</number>
</factor_type>
<factor_recursion>
</factor_recursion>
</factor_recursion>
</factor>
<term>
</term>
</expression>
</right_value>
</assign>
SEMI
</assignment>
<block>
<declare_closure>
</declare_closure>
<block_closure>
</block_closure>
</block>
</block_closure>
</block>
</block_closure>
</block>
RIGHT_BOUNDER
</cpd_block>
</for_block>
</for_loop>
<block>
<declare_closure>
</declare_closure>
<block_closure>
<for_loop>
for
<for_block>
<declare_or_assign>
<per_declaration>
<declare>
<type>
int
</type>
<variable>
<identifier>
ID
</identifier>
<index>
</index>
</variable>
<initialization>
ASSIGN
<right_value>
<expression>
<factor>
<factor_type>
<number>
INT_VALUE
</number>
</factor_type>
<factor_recursion>
</factor_recursion>
</factor>
<term>
</term>
</expression>
</right_value>
</initialization>
</declare>
<per_declare_closure>
</per_declare_closure>
SEMI
</per_declaration>
</declare_or_assign>
<logic_exp>
<expression>
<factor>
<factor_type>
<variable>
<identifier>
ID
</identifier>
<index>
</index>
</variable>
</factor_type>
<factor_recursion>
</factor_recursion>
</factor>
<term>
</term>
</expression>
<logic_op>
LES
</logic_op>
<expression>
<factor>
<factor_type>
<variable>
<identifier>
ID
</identifier>
<index>
</index>
</variable>
</factor_type>
<factor_recursion>
</factor_recursion>
</factor>
<term>
</term>
</expression>
</logic_exp>
SEMI
<inner_assign>
<variable>
<identifier>
ID
</identifier>
<index>
</index>
</variable>
<assign>
ASSIGN
<right_value>
<expression>
<factor>
<factor_type>
<variable>
<identifier>
ID
</identifier>
<index>
</index>
</variable>
</factor_type>
<factor_recursion>
</factor_recursion>
</factor>
<term>
PLUS
<factor>
<factor_type>
<number>
INT_VALUE
</number>
</factor_type>
<factor_recursion>
</factor_recursion>
</factor>
<term>
</term>
</term>
</expression>
</right_value>
</assign>
</inner_assign>
<cpd_block>
LEFT_BOUNDER
<block>
<declare_closure>
</declare_closure>
<block_closure>
<functions>
<function>
<write_fun>
write
<data>
<expression>
<factor>
<factor_type>
<variable>
<identifier>
ID
</identifier>
<index>
LEFT_INDEX
<factor_type>
<variable>
<identifier>
ID
</identifier>
<index>
</index>
</variable>
</factor_type>
RIGHT_INDEX
</index>
</variable>
</factor_type>
<factor_recursion>
</factor_recursion>
</factor>
<term>
</term>
</expression>
</data>
</write_fun>
</function>
SEMI
</functions>
<block>
<declare_closure>
</declare_closure>
<block_closure>
<functions>
<function>
<write_fun>
write
<data>
<expression>
<factor>
<factor_type>
<variable>
<identifier>
ID
</identifier>
<index>
LEFT_INDEX
<factor_type>
<variable>
<identifier>
ID
</identifier>
<index>
</index>
</variable>
</factor_type>
RIGHT_INDEX
</index>
</variable>
</factor_type>
<factor_recursion>
</factor_recursion>
</factor>
<term>
</term>
</expression>
</data>
</write_fun>
</function>
SEMI
</functions>
<block>
<declare_closure>
</declare_closure>
<block_closure>
</block_closure>
</block>
</block_closure>
</block>
</block_closure>
</block>
RIGHT_BOUNDER
</cpd_block>
</for_block>
</for_loop>
<block>
<declare_closure>
</declare_closure>
<block_closure>
</block_closure>
</block>
</block_closure>
</block>
</block_closure>
</block>
RIGHT_BOUNDER
</cpd_block>
<else>
else
<cpd_block>
LEFT_BOUNDER
<block>
<declare_closure>
</declare_closure>
<block_closure>
<functions>
<function>
<write_fun>
write
<data>
<expression>
<factor>
<factor_type>
<number>
INT_VALUE
</number>
</factor_type>
<factor_recursion>
</factor_recursion>
</factor>
<term>
</term>
</expression>
</data>
</write_fun>
</function>
SEMI
</functions>
<block>
<declare_closure>
</declare_closure>
<block_closure>
</block_closure>
</block>
</block_closure>
</block>
RIGHT_BOUNDER
</cpd_block>
</else>
</if_block>
</if_stmt>
<block>
<declare_closure>
</declare_closure>
<block_closure>
<while_loop>
while
<while_block>
<logic_exp>
<expression>
<factor>
<factor_type>
<variable>
<identifier>
ID
</identifier>
<index>
</index>
</variable>
</factor_type>
<factor_recursion>
</factor_recursion>
</factor>
<term>
</term>
</expression>
<logic_op>
GRT
</logic_op>
<expression>
<factor>
<factor_type>
<number>
INT_VALUE
</number>
</factor_type>
<factor_recursion>
</factor_recursion>
</factor>
<term>
</term>
</expression>
</logic_exp>
<cpd_block>
LEFT_BOUNDER
<block>
<declare_closure>
</declare_closure>
<block_closure>
<assignment>
<variable>
<identifier>
ID
</identifier>
<index>
</index>
</variable>
<assign>
ASSIGN
<right_value>
<expression>
<factor>
<factor_type>
<variable>
<identifier>
ID
</identifier>
<index>
</index>
</variable>
</factor_type>
<factor_recursion>
</factor_recursion>
</factor>
<term>
MINUS
<factor>
<factor_type>
<number>
INT_VALUE
</number>
</factor_type>
<factor_recursion>
</factor_recursion>
</factor>
<term>
</term>
</term>
</expression>
</right_value>
</assign>
SEMI
</assignment>
<block>
<declare_closure>
</declare_closure>
<block_closure>
</block_closure>
</block>
</block_closure>
</block>
RIGHT_BOUNDER
</cpd_block>
</while_block>
</while_loop>
<block>
<declare_closure>
</declare_closure>
<block_closure>
<functions>
<function>
<write_fun>
write
<data>
<expression>
<factor>
<factor_type>
<variable>
<identifier>
ID
</identifier>
<index>
</index>
</variable>
</factor_type>
<factor_recursion>
</factor_recursion>
</factor>
<term>
</term>
</expression>
</data>
</write_fun>
</function>
SEMI
</functions>
<block>
<declare_closure>
</declare_closure>
<block_closure>
</block_closure>
</block>
</block_closure>
</block>
</block_closure>
</block>
</block_closure>
</block>
</block_closure>
</block>
</program>
