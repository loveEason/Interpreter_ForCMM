————————————————————————Grammer non-terminals are as follow——————————————————————————
<assign>
<assignment>
<block>
<block_closure>
<constant>
<cpd_block>
<data>
<data_closure>
<datas>
<declare>
<declare_closure>
<declare_or_assign>
<else>
<expression>
<factor>
<factor_recursion>
<factor_type>
<for_block>
<for_loop>
<function>
<functions>
<identifier>
<if_block>
<if_stmt>
<index>
<initialization>
<inner_assign>
<logic_exp>
<logic_op>
<number>
<per_declaration>
<per_declare_closure>
<program>
<read_fun>
<right_value>
<self_op>
<term>
<type>
<variable>
<while_block>
<while_loop>
<write_fun>



———————————————————————-Grammer terminals are as follow————————————————————————
#
$
%
%=
(
)
*
*=
+
++
+=
,
-
--
-=
/
/=
;
<
<=
<>
<right-value>
=
==
>
>=
FLOAT_VALUE
ID
INT_VALUE
[
]
else
for
if
int
read
real
while
write
{
}



————————————————————————Grammer tokens' first sets are as follow————————————————————————
           : {$}
         # : {#}
         $ : {$}
         % : {%}
        %= : {%=}
         ( : {(}
         ) : {)}
         * : {*}
        *= : {*=}
         + : {+}
        ++ : {++}
        += : {+=}
         , : {,}
         - : {-}
        -- : {--}
        -= : {-=}
         / : {/}
        /= : {/=}
         ; : {;}
         < : {<}
        <= : {<=}
        <> : {<>}
  <assign> : {%=,*=,++,+=,--,-=,/=,=}
<assignment> : {++,--,ID}
   <block> : {$,++,--,;,ID,for,if,int,read,real,while,write}
<block_closure> : {$,++,--,ID,for,if,read,while,write}
<constant> : {FLOAT_VALUE,INT_VALUE}
<cpd_block> : {{}
    <data> : {(,FLOAT_VALUE,ID,INT_VALUE}
<data_closure> : {$,,}
   <datas> : {(,FLOAT_VALUE,ID,INT_VALUE}
 <declare> : {int,real}
<declare_closure> : {$,int,real}
<declare_or_assign> : {++,--,;,ID,int,real}
    <else> : {$,else}
<expression> : {(,FLOAT_VALUE,ID,INT_VALUE}
  <factor> : {(,FLOAT_VALUE,ID,INT_VALUE}
<factor_recursion> : {$,%,*,/}
<factor_type> : {(,FLOAT_VALUE,ID,INT_VALUE}
<for_block> : {(}
<for_loop> : {for}
<function> : {read,write}
<functions> : {read,write}
<identifier> : {ID}
<if_block> : {(}
 <if_stmt> : {if}
   <index> : {$,[}
<initialization> : {$,=}
<inner_assign> : {++,--,ID}
<logic_exp> : {(,FLOAT_VALUE,ID,INT_VALUE}
<logic_op> : {<,<=,<>,==,>,>=}
  <number> : {FLOAT_VALUE,INT_VALUE}
<per_declaration> : {int,real}
<per_declare_closure> : {$,,}
 <program> : {$,++,--,;,ID,for,if,int,read,real,while,write}
<read_fun> : {read}
<right-value> : {<right-value>}
<right_value> : {(,FLOAT_VALUE,ID,INT_VALUE,{}
 <self_op> : {++,--}
    <term> : {$,+,-}
    <type> : {int,real}
<variable> : {ID}
<while_block> : {(}
<while_loop> : {while}
<write_fun> : {write}
         = : {=}
        == : {==}
         > : {>}
        >= : {>=}
FLOAT_VALUE : {FLOAT_VALUE}
        ID : {ID}
 INT_VALUE : {INT_VALUE}
         [ : {[}
         ] : {]}
      else : {else}
       for : {for}
        if : {if}
       int : {int}
      read : {read}
      real : {real}
     while : {while}
     write : {write}
         { : {{}
         } : {}}



————————————————————————Deducers' first sets are as follow————————————————————————
<program> -> <block> : {$,++,--,;,ID,for,if,int,read,real,while,write}
      <program> -> $ : {$}
        <block> -> ; : {;}
<block> -> <declare_closure> <block_closure> : {$,++,--,ID,for,if,int,read,real,while,write}
<declare_closure> -> <per_declaration> <declare_closure> : {int,real}
<declare_closure> -> $ : {$}
<per_declaration> -> <declare> <per_declare_closure> ; : {int,real}
<declare> -> <type> <variable> <initialization> : {int,real}
<per_declare_closure> -> , <variable> <initialization> <per_declare_closure> : {,}
<per_declare_closure> -> $ : {$}
       <type> -> int : {int}
      <type> -> real : {real}
<variable> -> <identifier> <index> : {ID}
  <identifier> -> ID : {ID}
<index> -> [ <factor_type> ] : {[}
        <index> -> $ : {$}
<factor_type> -> ( <expression> ) : {(}
<factor_type> -> <variable> : {ID}
<factor_type> -> <number> : {FLOAT_VALUE,INT_VALUE}
<number> -> INT_VALUE : {INT_VALUE}
<number> -> FLOAT_VALUE : {FLOAT_VALUE}
<initialization> -> = <right_value> : {=}
<initialization> -> $ : {$}
<right_value> -> <expression> : {(,FLOAT_VALUE,ID,INT_VALUE}
<right_value> -> { <datas> } : {{}
<datas> -> <data> <data_closure> : {(,FLOAT_VALUE,ID,INT_VALUE}
<data_closure> -> , <data> <data_closure> : {,}
 <data_closure> -> $ : {$}
<data> -> <constant> : {FLOAT_VALUE,INT_VALUE}
<data> -> <variable> : {ID}
<data> -> <expression> : {(,FLOAT_VALUE,ID,INT_VALUE}
<constant> -> <number> : {FLOAT_VALUE,INT_VALUE}
<expression> -> <factor> <term> : {(,FLOAT_VALUE,ID,INT_VALUE}
<factor> -> <factor_type> <factor_recursion> : {(,FLOAT_VALUE,ID,INT_VALUE}
<factor_recursion> -> * <factor_type> <factor_recursion> : {*}
<factor_recursion> -> / <factor_type> <factor_recursion> : {/}
<factor_recursion> -> % <factor_type> <factor_recursion> : {%}
<factor_recursion> -> $ : {$}
<term> -> + <factor> <term> : {+}
<term> -> - <factor> <term> : {-}
         <term> -> $ : {$}
<block_closure> -> <assignment> <block> : {++,--,ID}
<block_closure> -> <for_loop> <block> : {for}
<block_closure> -> <while_loop> <block> : {while}
<block_closure> -> <if_stmt> <block> : {if}
<block_closure> -> <functions> <block> : {read,write}
<block_closure> -> $ : {$}
<assignment> -> <self_op> <variable> ; : {++,--}
<assignment> -> <variable> <assign> ; : {ID}
<assign> -> <self_op> : {++,--}
<assign> -> = <right_value> : {=}
<assign> -> += <right_value> : {+=}
<assign> -> -= <right_value> : {-=}
<assign> -> *= <right_value> : {*=}
<assign> -> /= <right_value> : {/=}
<assign> -> %= <right-value> : {%=}
     <self_op> -> ++ : {++}
     <self_op> -> -- : {--}
<for_loop> -> for <for_block> : {for}
<for_block> -> ( <declare_or_assign> <logic_exp> ; <inner_assign> ) <cpd_block> : {(}
<declare_or_assign> -> <per_declaration> : {int,real}
<declare_or_assign> -> <assignment> : {++,--,ID}
<declare_or_assign> -> ; : {;}
<logic_exp> -> <expression> <logic_op> <expression> : {(,FLOAT_VALUE,ID,INT_VALUE}
     <logic_op> -> < : {<}
    <logic_op> -> <= : {<=}
     <logic_op> -> > : {>}
    <logic_op> -> >= : {>=}
    <logic_op> -> <> : {<>}
    <logic_op> -> == : {==}
<inner_assign> -> <self_op> <variable> : {++,--}
<inner_assign> -> <variable> <assign> : {ID}
<while_loop> -> while <while_block> : {while}
<while_block> -> ( <logic_exp> ) <cpd_block> : {(}
<if_stmt> -> if <if_block> : {if}
<if_block> -> ( <logic_exp> ) <cpd_block> <else> : {(}
<else> -> else <cpd_block> : {else}
         <else> -> $ : {$}
<functions> -> <function> ; : {read,write}
<function> -> <write_fun> : {write}
<function> -> <read_fun> : {read}
<read_fun> -> read ( <variable> ) : {read}
<write_fun> -> write ( <data> ) : {write}
<cpd_block> -> { <block> } : {{}
                     : {$}



————————————————————————Non-teminals' follow sets are as follow————————————————————————
                     : {            <assign> : {),;}
        <assignment> : {#,(,++,--,;,FLOAT_VALUE,ID,INT_VALUE,for,if,int,read,real,while,write,}}
             <block> : {#,}}
     <block_closure> : {#,}}
          <constant> : {),,,}}
         <cpd_block> : {#,++,--,;,ID,else,for,if,int,read,real,while,write,}}
              <data> : {),,,}}
      <data_closure> : {}}
             <datas> : {}}
           <declare> : {,,;}
   <declare_closure> : {#,++,--,ID,for,if,read,while,write,}}
 <declare_or_assign> : {(,FLOAT_VALUE,ID,INT_VALUE}
              <else> : {#,++,--,;,ID,for,if,int,read,real,while,write,}}
        <expression> : {),,,;,<,<=,<>,==,>,>=,}}
            <factor> : {),+,,,-,;,<,<=,<>,==,>,>=,}}
  <factor_recursion> : {),+,,,-,;,<,<=,<>,==,>,>=,}}
       <factor_type> : {%,),*,+,,,-,/,;,<,<=,<>,==,>,>=,],}}
         <for_block> : {#,++,--,;,ID,for,if,int,read,real,while,write,}}
          <for_loop> : {#,++,--,;,ID,for,if,int,read,real,while,write,}}
          <function> : {;}
         <functions> : {#,++,--,;,ID,for,if,int,read,real,while,write,}}
        <identifier> : {%,%=,),*,*=,+,++,+=,,,-,--,-=,/,/=,;,<,<=,<>,=,==,>,>=,[,],}}
          <if_block> : {#,++,--,;,ID,for,if,int,read,real,while,write,}}
           <if_stmt> : {#,++,--,;,ID,for,if,int,read,real,while,write,}}
             <index> : {%,%=,),*,*=,+,++,+=,,,-,--,-=,/,/=,;,<,<=,<>,=,==,>,>=,],}}
    <initialization> : {,,;}
      <inner_assign> : {)}
         <logic_exp> : {),;}
          <logic_op> : {(,FLOAT_VALUE,ID,INT_VALUE}
            <number> : {%,),*,+,,,-,/,;,<,<=,<>,==,>,>=,],}}
   <per_declaration> : {#,(,++,--,FLOAT_VALUE,ID,INT_VALUE,for,if,int,read,real,while,write,}}
<per_declare_closure> : {;}
           <program> : {#}
          <read_fun> : {;}
       <right_value> : {),,,;}
           <self_op> : {),;,ID}
              <term> : {),,,;,<,<=,<>,==,>,>=,}}
              <type> : {ID}
          <variable> : {%,%=,),*,*=,+,++,+=,,,-,--,-=,/,/=,;,<,<=,<>,=,==,>,>=,],}}
       <while_block> : {#,++,--,;,ID,for,if,int,read,real,while,write,}}
        <while_loop> : {#,++,--,;,ID,for,if,int,read,real,while,write,}}
         <write_fun> : {;}



————————————————————————Deducers' follow sets are as follow————————————————————————
<program> -> <block> : {#,++,--,;,ID,for,if,int,read,real,while,write}
      <program> -> $ : {#}
        <block> -> ; : {;}
<block> -> <declare_closure> <block_closure> : {#,++,--,ID,for,if,int,read,real,while,write,}}
<declare_closure> -> <per_declaration> <declare_closure> : {int,real}
<declare_closure> -> $ : {#,++,--,ID,for,if,read,while,write,}}
<per_declaration> -> <declare> <per_declare_closure> ; : {int,real}
<declare> -> <type> <variable> <initialization> : {int,real}
<per_declare_closure> -> , <variable> <initialization> <per_declare_closure> : {,}
<per_declare_closure> -> $ : {;}
       <type> -> int : {int}
      <type> -> real : {real}
<variable> -> <identifier> <index> : {ID}
  <identifier> -> ID : {ID}
<index> -> [ <factor_type> ] : {[}
        <index> -> $ : {%,%=,),*,*=,+,++,+=,,,-,--,-=,/,/=,;,<,<=,<>,=,==,>,>=,],}}
<factor_type> -> ( <expression> ) : {(}
<factor_type> -> <variable> : {ID}
<factor_type> -> <number> : {FLOAT_VALUE,INT_VALUE}
<number> -> INT_VALUE : {INT_VALUE}
<number> -> FLOAT_VALUE : {FLOAT_VALUE}
<initialization> -> = <right_value> : {=}
<initialization> -> $ : {,,;}
<right_value> -> <expression> : {(,FLOAT_VALUE,ID,INT_VALUE}
<right_value> -> { <datas> } : {{}
<datas> -> <data> <data_closure> : {(,FLOAT_VALUE,ID,INT_VALUE}
<data_closure> -> , <data> <data_closure> : {,}
 <data_closure> -> $ : {}}
<data> -> <constant> : {FLOAT_VALUE,INT_VALUE}
<data> -> <variable> : {ID}
<data> -> <expression> : {(,FLOAT_VALUE,ID,INT_VALUE}
<constant> -> <number> : {FLOAT_VALUE,INT_VALUE}
<expression> -> <factor> <term> : {(,FLOAT_VALUE,ID,INT_VALUE}
<factor> -> <factor_type> <factor_recursion> : {(,FLOAT_VALUE,ID,INT_VALUE}
<factor_recursion> -> * <factor_type> <factor_recursion> : {*}
<factor_recursion> -> / <factor_type> <factor_recursion> : {/}
<factor_recursion> -> % <factor_type> <factor_recursion> : {%}
<factor_recursion> -> $ : {),+,,,-,;,<,<=,<>,==,>,>=,}}
<term> -> + <factor> <term> : {+}
<term> -> - <factor> <term> : {-}
         <term> -> $ : {),,,;,<,<=,<>,==,>,>=,}}
<block_closure> -> <assignment> <block> : {++,--,ID}
<block_closure> -> <for_loop> <block> : {for}
<block_closure> -> <while_loop> <block> : {while}
<block_closure> -> <if_stmt> <block> : {if}
<block_closure> -> <functions> <block> : {read,write}
<block_closure> -> $ : {#,}}
<assignment> -> <self_op> <variable> ; : {++,--}
<assignment> -> <variable> <assign> ; : {ID}
<assign> -> <self_op> : {++,--}
<assign> -> = <right_value> : {=}
<assign> -> += <right_value> : {+=}
<assign> -> -= <right_value> : {-=}
<assign> -> *= <right_value> : {*=}
<assign> -> /= <right_value> : {/=}
<assign> -> %= <right-value> : {%=}
     <self_op> -> ++ : {++}
     <self_op> -> -- : {--}
<for_loop> -> for <for_block> : {for}
<for_block> -> ( <declare_or_assign> <logic_exp> ; <inner_assign> ) <cpd_block> : {(}
<declare_or_assign> -> <per_declaration> : {int,real}
<declare_or_assign> -> <assignment> : {++,--,ID}
<declare_or_assign> -> ; : {;}
<logic_exp> -> <expression> <logic_op> <expression> : {(,FLOAT_VALUE,ID,INT_VALUE}
     <logic_op> -> < : {<}
    <logic_op> -> <= : {<=}
     <logic_op> -> > : {>}
    <logic_op> -> >= : {>=}
    <logic_op> -> <> : {<>}
    <logic_op> -> == : {==}
<inner_assign> -> <self_op> <variable> : {++,--}
<inner_assign> -> <variable> <assign> : {ID}
<while_loop> -> while <while_block> : {while}
<while_block> -> ( <logic_exp> ) <cpd_block> : {(}
<if_stmt> -> if <if_block> : {if}
<if_block> -> ( <logic_exp> ) <cpd_block> <else> : {(}
<else> -> else <cpd_block> : {else}
         <else> -> $ : {#,++,--,;,ID,for,if,int,read,real,while,write,}}
<functions> -> <function> ; : {read,write}
<function> -> <write_fun> : {write}
<function> -> <read_fun> : {read}
<read_fun> -> read ( <variable> ) : {read}
<write_fun> -> write ( <data> ) : {write}
<cpd_block> -> { <block> } : {{}



————————————————————————Prodiction-analyzing table is as follow————————————————————————
<assign> encounters %=,using deducer:<assign> -> %= <right-value>
<assign> encounters *=,using deducer:<assign> -> *= <right_value>
<assign> encounters ++,using deducer:<assign> -> <self_op>
<assign> encounters +=,using deducer:<assign> -> += <right_value>
<assign> encounters --,using deducer:<assign> -> <self_op>
<assign> encounters -=,using deducer:<assign> -> -= <right_value>
<assign> encounters /=,using deducer:<assign> -> /= <right_value>
<assign> encounters =,using deducer:<assign> -> = <right_value>
<assignment> encounters ++,using deducer:<assignment> -> <self_op> <variable> ;
<assignment> encounters --,using deducer:<assignment> -> <self_op> <variable> ;
<assignment> encounters ID,using deducer:<assignment> -> <variable> <assign> ;
<block> encounters #,using deducer:<block> -> <declare_closure> <block_closure>
<block> encounters ++,using deducer:<block> -> <declare_closure> <block_closure>
<block> encounters --,using deducer:<block> -> <declare_closure> <block_closure>
<block> encounters ;,using deducer:<block> -> ;
<block> encounters ID,using deducer:<block> -> <declare_closure> <block_closure>
<block> encounters for,using deducer:<block> -> <declare_closure> <block_closure>
<block> encounters if,using deducer:<block> -> <declare_closure> <block_closure>
<block> encounters int,using deducer:<block> -> <declare_closure> <block_closure>
<block> encounters read,using deducer:<block> -> <declare_closure> <block_closure>
<block> encounters real,using deducer:<block> -> <declare_closure> <block_closure>
<block> encounters while,using deducer:<block> -> <declare_closure> <block_closure>
<block> encounters write,using deducer:<block> -> <declare_closure> <block_closure>
<block> encounters },using deducer:<block> -> <declare_closure> <block_closure>
<block_closure> encounters #,using deducer:<block_closure> -> $
<block_closure> encounters ++,using deducer:<block_closure> -> <assignment> <block>
<block_closure> encounters --,using deducer:<block_closure> -> <assignment> <block>
<block_closure> encounters ID,using deducer:<block_closure> -> <assignment> <block>
<block_closure> encounters for,using deducer:<block_closure> -> <for_loop> <block>
<block_closure> encounters if,using deducer:<block_closure> -> <if_stmt> <block>
<block_closure> encounters read,using deducer:<block_closure> -> <functions> <block>
<block_closure> encounters while,using deducer:<block_closure> -> <while_loop> <block>
<block_closure> encounters write,using deducer:<block_closure> -> <functions> <block>
<block_closure> encounters },using deducer:<block_closure> -> $
<constant> encounters FLOAT_VALUE,using deducer:<constant> -> <number>
<constant> encounters INT_VALUE,using deducer:<constant> -> <number>
<cpd_block> encounters {,using deducer:<cpd_block> -> { <block> }
<data> encounters (,using deducer:<data> -> <expression>
<data> encounters FLOAT_VALUE,using deducer:<data> -> <expression>
<data> encounters ID,using deducer:<data> -> <expression>
<data> encounters INT_VALUE,using deducer:<data> -> <expression>
<data_closure> encounters ,,using deducer:<data_closure> -> , <data> <data_closure>
<data_closure> encounters },using deducer:<data_closure> -> $
<datas> encounters (,using deducer:<datas> -> <data> <data_closure>
<datas> encounters FLOAT_VALUE,using deducer:<datas> -> <data> <data_closure>
<datas> encounters ID,using deducer:<datas> -> <data> <data_closure>
<datas> encounters INT_VALUE,using deducer:<datas> -> <data> <data_closure>
<declare> encounters int,using deducer:<declare> -> <type> <variable> <initialization>
<declare> encounters real,using deducer:<declare> -> <type> <variable> <initialization>
<declare_closure> encounters #,using deducer:<declare_closure> -> $
<declare_closure> encounters ++,using deducer:<declare_closure> -> $
<declare_closure> encounters --,using deducer:<declare_closure> -> $
<declare_closure> encounters ID,using deducer:<declare_closure> -> $
<declare_closure> encounters for,using deducer:<declare_closure> -> $
<declare_closure> encounters if,using deducer:<declare_closure> -> $
<declare_closure> encounters int,using deducer:<declare_closure> -> <per_declaration> <declare_closure>
<declare_closure> encounters read,using deducer:<declare_closure> -> $
<declare_closure> encounters real,using deducer:<declare_closure> -> <per_declaration> <declare_closure>
<declare_closure> encounters while,using deducer:<declare_closure> -> $
<declare_closure> encounters write,using deducer:<declare_closure> -> $
<declare_closure> encounters },using deducer:<declare_closure> -> $
<declare_or_assign> encounters ++,using deducer:<declare_or_assign> -> <assignment>
<declare_or_assign> encounters --,using deducer:<declare_or_assign> -> <assignment>
<declare_or_assign> encounters ;,using deducer:<declare_or_assign> -> ;
<declare_or_assign> encounters ID,using deducer:<declare_or_assign> -> <assignment>
<declare_or_assign> encounters int,using deducer:<declare_or_assign> -> <per_declaration>
<declare_or_assign> encounters real,using deducer:<declare_or_assign> -> <per_declaration>
<else> encounters #,using deducer:<else> -> $
<else> encounters ++,using deducer:<else> -> $
<else> encounters --,using deducer:<else> -> $
<else> encounters ;,using deducer:<else> -> $
<else> encounters ID,using deducer:<else> -> $
<else> encounters else,using deducer:<else> -> else <cpd_block>
<else> encounters for,using deducer:<else> -> $
<else> encounters if,using deducer:<else> -> $
<else> encounters int,using deducer:<else> -> $
<else> encounters read,using deducer:<else> -> $
<else> encounters real,using deducer:<else> -> $
<else> encounters while,using deducer:<else> -> $
<else> encounters write,using deducer:<else> -> $
<else> encounters },using deducer:<else> -> $
<expression> encounters (,using deducer:<expression> -> <factor> <term>
<expression> encounters FLOAT_VALUE,using deducer:<expression> -> <factor> <term>
<expression> encounters ID,using deducer:<expression> -> <factor> <term>
<expression> encounters INT_VALUE,using deducer:<expression> -> <factor> <term>
<factor> encounters (,using deducer:<factor> -> <factor_type> <factor_recursion>
<factor> encounters FLOAT_VALUE,using deducer:<factor> -> <factor_type> <factor_recursion>
<factor> encounters ID,using deducer:<factor> -> <factor_type> <factor_recursion>
<factor> encounters INT_VALUE,using deducer:<factor> -> <factor_type> <factor_recursion>
<factor_recursion> encounters %,using deducer:<factor_recursion> -> % <factor_type> <factor_recursion>
<factor_recursion> encounters ),using deducer:<factor_recursion> -> $
<factor_recursion> encounters *,using deducer:<factor_recursion> -> * <factor_type> <factor_recursion>
<factor_recursion> encounters +,using deducer:<factor_recursion> -> $
<factor_recursion> encounters ,,using deducer:<factor_recursion> -> $
<factor_recursion> encounters -,using deducer:<factor_recursion> -> $
<factor_recursion> encounters /,using deducer:<factor_recursion> -> / <factor_type> <factor_recursion>
<factor_recursion> encounters ;,using deducer:<factor_recursion> -> $
<factor_recursion> encounters <,using deducer:<factor_recursion> -> $
<factor_recursion> encounters <=,using deducer:<factor_recursion> -> $
<factor_recursion> encounters <>,using deducer:<factor_recursion> -> $
<factor_recursion> encounters ==,using deducer:<factor_recursion> -> $
<factor_recursion> encounters >,using deducer:<factor_recursion> -> $
<factor_recursion> encounters >=,using deducer:<factor_recursion> -> $
<factor_recursion> encounters },using deducer:<factor_recursion> -> $
<factor_type> encounters (,using deducer:<factor_type> -> ( <expression> )
<factor_type> encounters FLOAT_VALUE,using deducer:<factor_type> -> <number>
<factor_type> encounters ID,using deducer:<factor_type> -> <variable>
<factor_type> encounters INT_VALUE,using deducer:<factor_type> -> <number>
<for_block> encounters (,using deducer:<for_block> -> ( <declare_or_assign> <logic_exp> ; <inner_assign> ) <cpd_block>
<for_loop> encounters for,using deducer:<for_loop> -> for <for_block>
<function> encounters read,using deducer:<function> -> <read_fun>
<function> encounters write,using deducer:<function> -> <write_fun>
<functions> encounters read,using deducer:<functions> -> <function> ;
<functions> encounters write,using deducer:<functions> -> <function> ;
<identifier> encounters ID,using deducer:<identifier> -> ID
<if_block> encounters (,using deducer:<if_block> -> ( <logic_exp> ) <cpd_block> <else>
<if_stmt> encounters if,using deducer:<if_stmt> -> if <if_block>
<index> encounters %,using deducer:<index> -> $
<index> encounters %=,using deducer:<index> -> $
<index> encounters ),using deducer:<index> -> $
<index> encounters *,using deducer:<index> -> $
<index> encounters *=,using deducer:<index> -> $
<index> encounters +,using deducer:<index> -> $
<index> encounters ++,using deducer:<index> -> $
<index> encounters +=,using deducer:<index> -> $
<index> encounters ,,using deducer:<index> -> $
<index> encounters -,using deducer:<index> -> $
<index> encounters --,using deducer:<index> -> $
<index> encounters -=,using deducer:<index> -> $
<index> encounters /,using deducer:<index> -> $
<index> encounters /=,using deducer:<index> -> $
<index> encounters ;,using deducer:<index> -> $
<index> encounters <,using deducer:<index> -> $
<index> encounters <=,using deducer:<index> -> $
<index> encounters <>,using deducer:<index> -> $
<index> encounters =,using deducer:<index> -> $
<index> encounters ==,using deducer:<index> -> $
<index> encounters >,using deducer:<index> -> $
<index> encounters >=,using deducer:<index> -> $
<index> encounters [,using deducer:<index> -> [ <factor_type> ]
<index> encounters ],using deducer:<index> -> $
<index> encounters },using deducer:<index> -> $
<initialization> encounters ,,using deducer:<initialization> -> $
<initialization> encounters ;,using deducer:<initialization> -> $
<initialization> encounters =,using deducer:<initialization> -> = <right_value>
<inner_assign> encounters ++,using deducer:<inner_assign> -> <self_op> <variable>
<inner_assign> encounters --,using deducer:<inner_assign> -> <self_op> <variable>
<inner_assign> encounters ID,using deducer:<inner_assign> -> <variable> <assign>
<logic_exp> encounters (,using deducer:<logic_exp> -> <expression> <logic_op> <expression>
<logic_exp> encounters FLOAT_VALUE,using deducer:<logic_exp> -> <expression> <logic_op> <expression>
<logic_exp> encounters ID,using deducer:<logic_exp> -> <expression> <logic_op> <expression>
<logic_exp> encounters INT_VALUE,using deducer:<logic_exp> -> <expression> <logic_op> <expression>
<logic_op> encounters <,using deducer:<logic_op> -> <
<logic_op> encounters <=,using deducer:<logic_op> -> <=
<logic_op> encounters <>,using deducer:<logic_op> -> <>
<logic_op> encounters ==,using deducer:<logic_op> -> ==
<logic_op> encounters >,using deducer:<logic_op> -> >
<logic_op> encounters >=,using deducer:<logic_op> -> >=
<number> encounters FLOAT_VALUE,using deducer:<number> -> FLOAT_VALUE
<number> encounters INT_VALUE,using deducer:<number> -> INT_VALUE
<per_declaration> encounters int,using deducer:<per_declaration> -> <declare> <per_declare_closure> ;
<per_declaration> encounters real,using deducer:<per_declaration> -> <declare> <per_declare_closure> ;
<per_declare_closure> encounters ,,using deducer:<per_declare_closure> -> , <variable> <initialization> <per_declare_closure>
<per_declare_closure> encounters ;,using deducer:<per_declare_closure> -> $
<program> encounters #,using deducer:<program> -> $
<program> encounters ++,using deducer:<program> -> <block>
<program> encounters --,using deducer:<program> -> <block>
<program> encounters ;,using deducer:<program> -> <block>
<program> encounters ID,using deducer:<program> -> <block>
<program> encounters for,using deducer:<program> -> <block>
<program> encounters if,using deducer:<program> -> <block>
<program> encounters int,using deducer:<program> -> <block>
<program> encounters read,using deducer:<program> -> <block>
<program> encounters real,using deducer:<program> -> <block>
<program> encounters while,using deducer:<program> -> <block>
<program> encounters write,using deducer:<program> -> <block>
<read_fun> encounters read,using deducer:<read_fun> -> read ( <variable> )
<right_value> encounters (,using deducer:<right_value> -> <expression>
<right_value> encounters FLOAT_VALUE,using deducer:<right_value> -> <expression>
<right_value> encounters ID,using deducer:<right_value> -> <expression>
<right_value> encounters INT_VALUE,using deducer:<right_value> -> <expression>
<right_value> encounters {,using deducer:<right_value> -> { <datas> }
<self_op> encounters ++,using deducer:<self_op> -> ++
<self_op> encounters --,using deducer:<self_op> -> --
<term> encounters ),using deducer:<term> -> $
<term> encounters +,using deducer:<term> -> + <factor> <term>
<term> encounters ,,using deducer:<term> -> $
<term> encounters -,using deducer:<term> -> - <factor> <term>
<term> encounters ;,using deducer:<term> -> $
<term> encounters <,using deducer:<term> -> $
<term> encounters <=,using deducer:<term> -> $
<term> encounters <>,using deducer:<term> -> $
<term> encounters ==,using deducer:<term> -> $
<term> encounters >,using deducer:<term> -> $
<term> encounters >=,using deducer:<term> -> $
<term> encounters },using deducer:<term> -> $
<type> encounters int,using deducer:<type> -> int
<type> encounters real,using deducer:<type> -> real
<variable> encounters ID,using deducer:<variable> -> <identifier> <index>
<while_block> encounters (,using deducer:<while_block> -> ( <logic_exp> ) <cpd_block>
<while_loop> encounters while,using deducer:<while_loop> -> while <while_block>
<write_fun> encounters write,using deducer:<write_fun> -> write ( <data> )



