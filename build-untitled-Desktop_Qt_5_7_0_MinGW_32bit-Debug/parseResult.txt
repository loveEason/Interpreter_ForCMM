第1步
当前分析栈:# <program> 
剩余输入串:int ID = INT_VALUE ; # 
推导所用产生式:<program> -> <block>

第2步
当前分析栈:# <block> 
剩余输入串:int ID = INT_VALUE ; # 
推导所用产生式:<block> -> <declare_closure> <block_closure>

第3步
当前分析栈:# <block_closure> <declare_closure> 
剩余输入串:int ID = INT_VALUE ; # 
推导所用产生式:<declare_closure> -> <declaration> <declare_closure>

第4步
当前分析栈:# <block_closure> <declare_closure> <declaration> 
剩余输入串:int ID = INT_VALUE ; # 
推导所用产生式:<declaration> -> <declare> ;

第5步
当前分析栈:# <block_closure> <declare_closure> ; <declare> 
剩余输入串:int ID = INT_VALUE ; # 
推导所用产生式:<declare> -> <type> <variable> <initialization>

第6步
当前分析栈:# <block_closure> <declare_closure> ; <initialization> <variable> <type> 
剩余输入串:int ID = INT_VALUE ; # 
推导所用产生式:<type> -> int

第7步
当前分析栈:# <block_closure> <declare_closure> ; <initialization> <variable> int 
剩余输入串:int ID = INT_VALUE ; # 
Match :int

第8步
当前分析栈:# <block_closure> <declare_closure> ; <initialization> <variable> 
剩余输入串:ID = INT_VALUE ; # 
推导所用产生式:<variable> -> <identifier> <index>

第9步
当前分析栈:# <block_closure> <declare_closure> ; <initialization> <index> <identifier> 
剩余输入串:ID = INT_VALUE ; # 
推导所用产生式:<identifier> -> ID

第10步
当前分析栈:# <block_closure> <declare_closure> ; <initialization> <index> ID 
剩余输入串:ID = INT_VALUE ; # 
Match :ID

第11步
当前分析栈:# <block_closure> <declare_closure> ; <initialization> <index> 
剩余输入串:= INT_VALUE ; # 
推导所用产生式:<index> -> $

第12步
当前分析栈:# <block_closure> <declare_closure> ; <initialization> 
剩余输入串:= INT_VALUE ; # 
推导所用产生式:<initialization> -> = <right_value>

第13步
当前分析栈:# <block_closure> <declare_closure> ; <right_value> = 
剩余输入串:= INT_VALUE ; # 
Match :=

第14步
当前分析栈:# <block_closure> <declare_closure> ; <right_value> 
剩余输入串:INT_VALUE ; # 
推导所用产生式:<right_value> -> <expression>

第15步
当前分析栈:# <block_closure> <declare_closure> ; <expression> 
剩余输入串:INT_VALUE ; # 
推导所用产生式:<expression> -> <factor> <term>

第16步
当前分析栈:# <block_closure> <declare_closure> ; <term> <factor> 
剩余输入串:INT_VALUE ; # 
推导所用产生式:<factor> -> <factor_type> <factor_recursion>

第17步
当前分析栈:# <block_closure> <declare_closure> ; <term> <factor_recursion> <factor_type> 
剩余输入串:INT_VALUE ; # 
推导所用产生式:<factor_type> -> <number>

第18步
当前分析栈:# <block_closure> <declare_closure> ; <term> <factor_recursion> <number> 
剩余输入串:INT_VALUE ; # 
推导所用产生式:<number> -> INT_VALUE

第19步
当前分析栈:# <block_closure> <declare_closure> ; <term> <factor_recursion> INT_VALUE 
剩余输入串:INT_VALUE ; # 
Match :INT_VALUE

第20步
当前分析栈:# <block_closure> <declare_closure> ; <term> <factor_recursion> 
剩余输入串:; # 
推导所用产生式:<factor_recursion> -> $

第21步
当前分析栈:# <block_closure> <declare_closure> ; <term> 
剩余输入串:; # 
推导所用产生式:<term> -> $

第22步
当前分析栈:# <block_closure> <declare_closure> ; 
剩余输入串:; # 
Match :;

第23步
当前分析栈:# <block_closure> <declare_closure> 
剩余输入串:# 
推导所用产生式:<declare_closure> -> $

第24步
当前分析栈:# <block_closure> 
剩余输入串:# 
推导所用产生式:<block_closure> -> $

第25步
当前分析栈:# 
剩余输入串:# 
当前程序语法分析成功！
