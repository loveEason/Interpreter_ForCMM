<program> -> <block>
<program> -> $
<block> -> ;
<block> -> <declare_closure> <block_closure>
<declare_closure> -> <per_declaration> <declare_closure>
<declare_closure> -> $
<per_declaration> -> <declare> <per_declare_closure> ;
<declare> -> <type> <variable> <initialization>
<per_declare_closure> -> , <variable> <initialization> <per_declare_closure>
<per_declare_closure> -> $
<type> -> int
<type> -> real
<variable> -> <identifier> <index>
<identifier> -> ID
<index> -> [ <factor_type> ]
<index> -> $
<factor_type> -> ( <expression> )
<factor_type> -> <variable>
<factor_type> -> <number>
<number> -> INT_VALUE
<number> -> FLOAT_VALUE
<initialization> -> = <right_value>
<initialization> -> $
<right_value> -> <expression>
<right_value> -> { <datas> }
<datas> -> <data> <data_closure>
<data_closure> -> , <data> <data_closure>
<data_closure> -> $
<data> -> <constant>
<data> -> <variable>
<data> -> <expression>
<constant> -> <number>
<expression> -> <factor> <term>
<factor> -> <factor_type> <factor_recursion>
<factor_recursion> -> * <factor_type> <factor_recursion>
<factor_recursion> -> / <factor_type> <factor_recursion>
<factor_recursion> -> % <factor_type> <factor_recursion>
<factor_recursion> -> $
<term> -> + <factor> <term>
<term> -> - <factor> <term>
<term> -> $
<block_closure> -> <assignment> <block>
<block_closure> -> <for_loop> <block>
<block_closure> -> <while_loop> <block>
<block_closure> -> <if_stmt> <block>
<block_closure> -> <functions> <block>
<block_closure> -> $
<assignment> -> <self_op> <variable> ;
<assignment> -> <variable> <assign> ;
<assign> -> <self_op>
<assign> -> = <right_value>
<assign> -> += <right_value>
<assign> -> -= <right_value>
<assign> -> *= <right_value>
<assign> -> /= <right_value>
<assign> -> %= <right-value>
<self_op> -> ++
<self_op> -> --
<for_loop> -> for <for_block>
<for_block> -> ( <declare_or_assign> <logic_exp> ; <inner_assign> ) <cpd_block>
<declare_or_assign> -> <declaration>
<declare_or_assign> -> <assignment>
<logic_exp> -> <expression> <logic_op> <expression>
<logic_op> -> <
<logic_op> -> <=
<logic_op> -> >
<logic_op> -> >=
<logic_op> -> <>
<logic_op> -> ==
<inner_assign> -> <self_op> <variable>
<inner_assign> -> <variable> <assign>
<while_loop> -> while <while_block>
<while_block> -> ( <logic_exp> ) <cpd_block>
<if_stmt> -> if <if_block>
<if_block> -> ( <logic_exp> ) <cpd_block> <else>
<else> -> else <cpd_block>
<else> -> $
<functions> -> <function> ;
<function> -> <write_fun>
<function> -> <read_fun>
<read_fun> -> read ( <variable> )
<write_fun> -> write ( <data> )
<cpd_block> -> { <block> }
